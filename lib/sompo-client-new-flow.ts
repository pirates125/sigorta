/**
 * Sompo Sigorta - Yeni Trafik Teklifi Flow
 * Dashboard -> Yeni ƒ∞≈ü Teklifi -> Trafik -> Form Doldur -> Teklif Al
 */

import { Page } from "puppeteer";

export async function getTrafficQuoteNewFlow(
  page: Page,
  formData: any,
  screenshot: (name: string) => Promise<void>
): Promise<any> {
  try {
    console.log("üöó Trafik sigortasƒ± teklifi alƒ±nƒ±yor (Yeni Flow)...");

    // 1. "YENƒ∞ ƒ∞≈û TEKLƒ∞Fƒ∞" butonuna tƒ±kla
    console.log("üìã Yeni ƒ∞≈ü Teklifi butonunu arƒ±yorum...");
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll("button"));
      const btn = buttons.find((b) =>
        b.textContent?.includes("YENƒ∞ ƒ∞≈û TEKLƒ∞Fƒ∞")
      );
      if (btn) (btn as HTMLElement).click();
    });
    console.log("‚úÖ Yeni ƒ∞≈ü Teklifi butonuna tƒ±klandƒ±");
    await new Promise((resolve) => setTimeout(resolve, 2000));
    await screenshot("after-new-proposal-click");

    // 2. "Trafik" se√ßeneƒüine tƒ±kla
    console.log("üö¶ Trafik se√ßeneƒüini arƒ±yorum...");
    await page.evaluate(() => {
      const divs = Array.from(document.querySelectorAll(".job__name"));
      const trafficDiv = divs.find((div) =>
        div.textContent?.includes("Trafik")
      );
      if (trafficDiv) {
        // Parent'a tƒ±kla (t√ºm card'a tƒ±klamak i√ßin)
        const parent = trafficDiv.closest('[class*="job"]');
        if (parent) {
          (parent as HTMLElement).click();
        } else {
          (trafficDiv as HTMLElement).click();
        }
      }
    });
    console.log("‚úÖ Trafik se√ßeneƒüine tƒ±klandƒ±");
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // 3. "TEKLƒ∞F AL" butonuna tƒ±kla
    console.log("üìù Teklif Al butonunu arƒ±yorum...");
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll("button"));
      const btn = buttons.find((b) => b.textContent?.includes("TEKLƒ∞F AL"));
      if (btn) (btn as HTMLElement).click();
    });
    console.log("‚úÖ Teklif Al butonuna tƒ±klandƒ±");
    await new Promise((resolve) => setTimeout(resolve, 3000));
    await screenshot("traffic-form-opened");

    // 4. Kasko checkbox'ƒ±nƒ± KALDIR (eƒüer se√ßiliyse)
    console.log("üî≤ Checkbox'larƒ± ayarlƒ±yorum...");
    await page.evaluate(() => {
      const kaskoCheckbox = document.querySelector(
        "#chkCasco"
      ) as HTMLInputElement;
      if (kaskoCheckbox && kaskoCheckbox.checked) {
        kaskoCheckbox.click();
      }
    });

    // 5. Trafik checkbox'ƒ±nƒ± SE√á (eƒüer se√ßili deƒüilse)
    await page.evaluate(() => {
      const trafficCheckbox = document.querySelector(
        "#chkTraffic"
      ) as HTMLInputElement;
      if (trafficCheckbox && !trafficCheckbox.checked) {
        trafficCheckbox.click();
      }
    });
    console.log("‚úÖ Checkbox'lar ayarlandƒ±");

    // 6. TC Kimlik No gir
    console.log("üÜî TC Kimlik giriliyor...");
    await page.waitForSelector("#txtIdentityOrTaxNo", { timeout: 10000 });
    await page.click("#txtIdentityOrTaxNo", { clickCount: 3 }); // Se√ß ve temizle
    await page.type("#txtIdentityOrTaxNo", formData.driverTCKN, { delay: 50 });
    console.log("‚úÖ TC Kimlik girildi:", formData.driverTCKN);

    // TC girildikten sonra 2 saniye bekle (otomatik adres ve telefon doldurmasƒ± i√ßin)
    await new Promise((resolve) => setTimeout(resolve, 2000));
    console.log("‚è≥ TC'den otomatik bilgiler dolduruldu (adres, telefon)...");

    // 7. Plaka bilgilerini gir (≈üehir kodu + plaka)
    console.log("üöò Plaka bilgileri giriliyor...");
    const plateParts = formData.plate.match(/^(\d{2})([A-Z]+)(\d+)$/i);
    if (!plateParts) {
      throw new Error("Ge√ßersiz plaka formatƒ±: " + formData.plate);
    }

    await page.click("#txtPlateNoCityNo");
    await page.type("#txtPlateNoCityNo", plateParts[1], { delay: 50 });
    console.log("  ≈ûehir kodu:", plateParts[1]);

    await page.click("#txtPlateNo");
    await page.type("#txtPlateNo", plateParts[2] + plateParts[3], {
      delay: 50,
    });
    console.log("  Plaka:", plateParts[2] + plateParts[3]);

    // 8. Tescil Seri Kod gir (varsa)
    if (formData.registrationCode) {
      console.log("üìÑ Tescil Seri Kod giriliyor...");
      await page.click("#txtEGMNoCode");
      await page.type("#txtEGMNoCode", formData.registrationCode, {
        delay: 50,
      });
      console.log("‚úÖ Tescil Seri Kod girildi:", formData.registrationCode);
    }

    // 9. Tescil/ASBIS No gir
    if (formData.registrationNumber) {
      console.log("üìÑ Tescil No giriliyor...");
      await page.click("#txtEGMNoNumber");
      await page.type("#txtEGMNoNumber", formData.registrationNumber, {
        delay: 50,
      });
      console.log("‚úÖ Tescil No girildi:", formData.registrationNumber);
    }

    // 10. EGM Sorgula butonuna tƒ±kla
    console.log("üîç EGM Sorgula butonu bekleniyor...");
    await page.waitForSelector("#btnSearchEgm", { timeout: 10000 });

    // Butonun enable olmasƒ±nƒ± bekle
    await page.waitForFunction(
      () => {
        const btn = document.querySelector("#btnSearchEgm") as HTMLImageElement;
        return btn && !btn.hasAttribute("disabled");
      },
      { timeout: 10000 }
    );

    // JavaScript ile EGM butonuna tƒ±kla
    await page.evaluate(() => {
      const btn = document.querySelector("#btnSearchEgm") as HTMLElement;
      if (btn) btn.click();
    });
    console.log("‚úÖ EGM Sorgula butonuna tƒ±klandƒ±");

    // EGM sorgulamasƒ±nƒ±n tamamlanmasƒ±nƒ± bekle
    await new Promise((resolve) => setTimeout(resolve, 5000));
    await screenshot("after-egm-query");

    // 11. Adres ve telefon otomatik dolduruldu mu kontrol et
    console.log("üìç Adres ve telefon bilgileri kontrol ediliyor...");
    const autoFilledInfo = await page.evaluate(() => {
      const addressField = document.querySelector(
        "#txtCustAddress"
      ) as HTMLTextAreaElement;
      const phoneAreaCode = document.querySelector(
        "#txtInsuredGsmAreaCode"
      ) as HTMLInputElement;
      const phoneNumber = document.querySelector(
        "#txtInsuredGsmNumber"
      ) as HTMLInputElement;

      return {
        addressFilled: addressField && addressField.value.length > 0,
        phoneFilled: phoneAreaCode && phoneAreaCode.value.length > 0,
        address: addressField?.value || "",
        phone: (phoneAreaCode?.value || "") + (phoneNumber?.value || ""),
      };
    });
    console.log("‚úÖ Adres otomatik dolduruldu:", autoFilledInfo.addressFilled);
    console.log("‚úÖ Telefon otomatik dolduruldu:", autoFilledInfo.phoneFilled);
    if (autoFilledInfo.addressFilled) {
      console.log(
        "  üìç Adres:",
        autoFilledInfo.address.substring(0, 50) + "..."
      );
    }
    if (autoFilledInfo.phoneFilled) {
      console.log("  üìû Telefon:", autoFilledInfo.phone);
    }

    // 12. Teklif Olu≈ütur butonuna tƒ±kla
    console.log("üíº Teklif Olu≈ütur butonuna tƒ±klanƒ±yor...");
    await page.waitForSelector("#btnProposalCreate", { timeout: 5000 });

    // JavaScript ile tƒ±kla
    await page.evaluate(() => {
      const link = document.querySelector("#btnProposalCreate") as HTMLElement;
      if (link) link.click();
    });
    console.log("‚úÖ Teklif olu≈üturma isteƒüi g√∂nderildi");

    // 13. Teklif sonucunu bekle - ƒ∞ki farklƒ± container'dan birini bekle
    console.log("‚è≥ Teklif sonucu bekleniyor...");
    await new Promise((resolve) => setTimeout(resolve, 8000)); // 8 saniye bekle
    await screenshot("waiting-for-proposal");

    // 14. Sonu√ßlarƒ± √ßek (√∂nce Kasko container'ƒ±ndan, yoksa Trafik Alternative'den)
    const result = await page.evaluate(() => {
      // ƒ∞lk √∂nce Kasko teklifi container'ƒ±na bak (loadedDivCascoProposal2)
      const cascoContainer = document.querySelector("#loadedDivCascoProposal2");
      if (
        cascoContainer &&
        (cascoContainer as HTMLElement).style.display !== "none"
      ) {
        const priceEl = document.querySelector(
          "#lblCascoProposal2GrossPremium"
        );
        const proposalNoEl = document.querySelector(
          "#lblCascoProposal2TransactionNo"
        );
        const installmentEl = document.querySelector(
          "#lblCascoInstallmentPlanName"
        );

        return {
          found: true,
          type: "KASKO",
          price: priceEl?.textContent?.trim() || "",
          proposalNo: proposalNoEl?.textContent?.trim() || "",
          installment: installmentEl?.textContent?.trim() || "",
          commission: "",
          commissionRate: "",
        };
      }

      // Eƒüer Kasko yoksa, Trafik Alternative container'ƒ±na bak
      const trafficContainer = document.querySelector(
        "#loadedDivTrafficProposalAlternative"
      );
      if (
        trafficContainer &&
        (trafficContainer as HTMLElement).style.display !== "none"
      ) {
        const priceEl = document.querySelector(
          "#lblTrafficProposalGrossPremiumAlternative"
        );
        const proposalNoEl = document.querySelector(
          "#lblTrafficProposalStartEndDateOrProposalNoAlternative"
        );
        const commissionAmountEl = document.querySelector(
          "#lblTrafficProposalCommisionAmountAlternative"
        );
        const commissionRatioEl = document.querySelector(
          "#lblTrafficProposalCommisionRatioAlternative"
        );

        return {
          found: true,
          type: "TRAFFIC",
          price: priceEl?.textContent?.trim() || "",
          proposalNo: proposalNoEl?.textContent?.trim() || "",
          commission: commissionAmountEl?.textContent?.trim() || "",
          commissionRate: commissionRatioEl?.textContent?.trim() || "",
          installment: "",
        };
      }

      return {
        found: false,
        type: "",
        price: "",
        proposalNo: "",
        commission: "",
        commissionRate: "",
        installment: "",
      };
    });

    if (!result.found) {
      console.error("‚ùå Teklif sonucu bulunamadƒ±!");
      await screenshot("proposal-not-found");
      throw new Error("Teklif sonucu sayfada bulunamadƒ±");
    }

    console.log("‚úÖ Teklif sonucu bulundu!");
    console.log("  Tip:", result.type);
    console.log("  Teklif No:", result.proposalNo);
    console.log("  Fiyat:", result.price);
    if (result.commission) console.log("  Komisyon:", result.commission);
    if (result.commissionRate)
      console.log("  Komisyon Oranƒ±:", result.commissionRate);
    if (result.installment) console.log("  Taksit:", result.installment);

    await screenshot("proposal-result");

    // Fiyatƒ± parse et (√∂rn: "18.165,99 TL" -> 18165.99)
    const priceMatch = result.price.match(/[\d.,]+/);
    const price = priceMatch
      ? parseFloat(priceMatch[0].replace(/\./g, "").replace(",", "."))
      : 0;

    // Komisyon tutarƒ±nƒ± parse et
    const commissionMatch = result.commission.match(/[\d.,]+/);
    const commissionAmount = commissionMatch
      ? parseFloat(commissionMatch[0].replace(/\./g, "").replace(",", "."))
      : 0;

    return {
      success: true,
      company: "Sompo Sigorta",
      price: price,
      currency: "TRY",
      policyNumber: result.proposalNo,
      coverages: result.type === "KASKO" ? ["Kasko"] : ["Trafik Sigortasƒ±"],
      details: {
        proposalNo: result.proposalNo,
        grossPremium: result.price,
        commission: result.commission,
        commissionRate: result.commissionRate,
        commissionAmount: commissionAmount,
        installment: result.installment,
        type: result.type,
      },
      rawData: result,
    };
  } catch (error: any) {
    console.error("‚ùå Trafik teklifi alma hatasƒ±:", error.message);
    await screenshot("traffic-quote-error");
    throw error;
  }
}
