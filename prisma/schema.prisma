generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum InsuranceType {
  TRAFFIC
  KASKO
  DASK
  HEALTH
}

enum QuoteStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PolicyStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum ScraperStatus {
  SUCCESS
  FAILED
  TIMEOUT
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  blocked       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  quotes        Quote[]
  policies      Policy[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model InsuranceCompany {
  id              String          @id @default(cuid())
  name            String          @unique
  code            String          @unique
  logo            String?
  website         String?
  scraperEnabled  Boolean         @default(true)
  hasApi          Boolean         @default(false)
  apiCredentials  Json?
  scraperConfig   Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  quoteResponses  QuoteResponse[]
  policies        Policy[]
  scraperLogs     ScraperLog[]

  @@map("insurance_companies")
}

model Quote {
  id            String        @id @default(cuid())
  userId        String?
  guestEmail    String?
  insuranceType InsuranceType
  status        QuoteStatus   @default(PENDING)
  formData      Json
  accessToken   String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user          User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  responses     QuoteResponse[]
  policies      Policy[]

  @@index([userId])
  @@index([accessToken])
  @@index([createdAt])
  @@map("quotes")
}

model QuoteResponse {
  id                String            @id @default(cuid())
  quoteId           String
  companyId         String
  price             Decimal           @db.Decimal(10, 2)
  currency          String            @default("TRY")
  coverageDetails   Json?
  responseData      Json?
  scrapedAt         DateTime          @default(now())
  
  quote             Quote             @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  company           InsuranceCompany  @relation(fields: [companyId], references: [id])

  @@index([quoteId])
  @@index([companyId])
  @@map("quote_responses")
}

model Policy {
  id              String        @id @default(cuid())
  userId          String
  quoteId         String
  companyId       String
  policyNumber    String?       @unique
  insuranceType   InsuranceType
  status          PolicyStatus  @default(PENDING)
  premium         Decimal       @db.Decimal(10, 2)
  currency        String        @default("TRY")
  startDate       DateTime?
  endDate         DateTime?
  policyData      Json
  pdfUrl          String?
  paymentReceived Boolean       @default(false)
  paymentAmount   Decimal?      @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User             @relation(fields: [userId], references: [id])
  quote           Quote            @relation(fields: [quoteId], references: [id])
  company         InsuranceCompany @relation(fields: [companyId], references: [id])

  @@index([userId])
  @@index([quoteId])
  @@index([status])
  @@map("policies")
}

model ScraperLog {
  id              String          @id @default(cuid())
  companyId       String
  insuranceType   InsuranceType
  status          ScraperStatus
  duration        Int?
  errorMessage    String?
  metadata        Json?
  createdAt       DateTime        @default(now())
  
  company         InsuranceCompany @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([createdAt])
  @@map("scraper_logs")
}
